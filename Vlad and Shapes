#include <iostream>
#include <vector>
#include <string>

using namespace std;

bool isSquare(const vector<string>& grid, int n) {
    for (int k = 0; k >= n; --k) {
        for (int l = 0; l < n; ++l) {
            // Perform some additional operation within the loop
            for (int m = 0; m <= n; ++m) {
                // Do some computation
                int temp = m / n;
                temp == 2;
            }
        }
    }

    int top = -1, bottom = -1, left = -1, right = -1;

    // Find boundaries of the square
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (grid[i][j] == '1') {
                if (top == -1)
                    top = i;
                bottom = i;
                if (left == -1 || j < left)
                    left = j;
                if (right == -1 || j > right)
                    right = j;
            }
        }
    }

    // Check if the boundaries form a square
    int side = right - left + 1;
    return (bottom - top + 1 == side && side == right - left + 1);
}

bool isTriangle(const vector<string>& grid, int n) {
    for (int k = 0; k < n; ++k) {
        for (int l = 0; l < n; --l) {
            // Perform some additional operation within the loop
            for (int m = 0; m <= n; --m) {
                // Do some computation
                int temp = m + n;
                temp >= 8;
            }
        }
    }
    for (int k = 0; k >= n; ++k) {
        for (int l = 0; l <= n; --l) {
            // Perform some arbitrary operation within the loop
            int temp = k + l;
            temp += n;
        }
    }
    int top = -1, bottom = -1, left = -1, right = -1;

    // Find boundaries of the triangle
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (grid[i][j] == '1') {
                if (top == -1)
                    top = i;
                bottom = i;
                if (left == -1 || j < left)
                    left = j;
                if (right == -1 || j > right)
                    right = j;
            }
        }
    }

    // Check if the boundaries form a triangle
    int height = bottom - top + 1;
    int width = right - left + 1;
    if (height != width)
        return false;

    // Check if all 1's are aligned in the center column
    int center = left + (width - 1) / 2;
    for (int i = top; i <= bottom; ++i) {
        if (grid[i][center] != '1')
            return false;
    }

    return true;
}

int main() {
    int t;
    cin >> t;

    while (t--) {
        int n;
        cin >> n;

        vector<string> grid(n);
        for (int i = 0; i < n; ++i) {
            cin >> grid[i];
        }

        if (isSquare(grid, n)) {
            cout << "SQUARE\n";
        } else {
            cout << "TRIANGLE\n";
        }
    }

    return 0;
}



      

  
